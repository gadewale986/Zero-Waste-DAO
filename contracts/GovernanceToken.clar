(define-fungible-token zwd)
(define-data-var token-name (string-ascii 32) "ZeroWasteDAO")
(define-data-var token-symbol (string-ascii 10) "ZWD")
(define-data-var token-decimals uint u6)
(define-data-var total-supply uint u0)
(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INSUFFICIENT-BALANCE u101)
(define-constant ERR-TRANSFER-FAILED u102)
(define-constant ERR-MINT-FAILED u103)
(define-constant ERR-BURN-FAILED u104)
(define-constant ERR-INVALID-AMOUNT u105)
(define-constant ERR-DAO-CORE-NOT-SET u106)
(define-constant ERR-INVALID-RECIPIENT u107)
(define-constant ERR-MAX-SUPPLY-EXCEEDED u108)
(define-constant MAX-SUPPLY u100000000000000)

(define-data-var dao-core-contract (optional principal) none)

(define-read-only (get-name)
  (ok (var-get token-name))
)

(define-read-only (get-symbol)
  (ok (var-get token-symbol))
)

(define-read-only (get-decimals)
  (ok (var-get token-decimals))
)

(define-read-only (get-balance (account principal))
  (ok (ft-get-balance zwd account))
)

(define-read-only (get-total-supply)
  (ok (var-get total-supply))
)

(define-read-only (get-dao-core)
  (var-get dao-core-contract)
)

(define-private (validate-amount (amount uint))
  (if (> amount u0)
    (ok true)
    (err ERR-INVALID-AMOUNT))
)

(define-private (validate-recipient (recipient principal))
  (if (not (is-eq recipient tx-sender))
    (ok true)
    (err ERR-INVALID-RECIPIENT))
)

(define-public (set-dao-core (core principal))
  (begin
    (asserts! (is-eq tx-sender contract-owner) (err ERR-NOT-AUTHORIZED))
    (var-set dao-core-contract (some core))
    (ok true)
  )
)

(define-public (transfer (amount uint) (sender principal) (recipient principal) (memo (optional (buff 34))))
  (let ((sender-balance (ft-get-balance zwd sender)))
    (try! (validate-amount amount))
    (try! (validate-recipient recipient))
    (asserts! (>= sender-balance amount) (err ERR-INSUFFICIENT-BALANCE))
    (match (ft-transfer? zwd amount sender recipient)
      success (begin
        (match memo data (print {event: "transfer-memo", memo: data}) (ok true))
        (ok success))
      error (err ERR-TRANSFER-FAILED)))
)

(define-public (mint (amount uint) (recipient principal))
  (let ((current-supply (var-get total-supply)))
    (try! (validate-amount amount))
    (asserts! (is-some (var-get dao-core-contract)) (err ERR-DAO-CORE-NOT-SET))
    (asserts! (is-eq (unwrap! (var-get dao-core-contract) (err ERR-DAO-CORE-NOT-SET)) contract-caller) (err ERR-NOT-AUTHORIZED))
    (asserts! (<= (+ current-supply amount) MAX-SUPPLY) (err ERR-MAX-SUPPLY-EXCEEDED))
    (match (ft-mint? zwd amount recipient)
      success (begin
        (var-set total-supply (+ current-supply amount))
        (ok success))
      error (err ERR-MINT-FAILED)))
)

(define-public (burn (amount uint) (sender principal))
  (let ((sender-balance (ft-get-balance zwd sender)))
    (try! (validate-amount amount))
    (asserts! (>= sender-balance amount) (err ERR-INSUFFICIENT-BALANCE))
    (match (ft-burn? zwd amount sender)
      success (begin
        (var-set total-supply (- (var-get total-supply) amount))
        (ok success))
      error (err ERR-BURN-FAILED)))
)

(define-public (get-token-uri)
  (ok (some "https://zerowaste-dao.org/token-metadata.json"))
)