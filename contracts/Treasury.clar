(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INVALID-AMOUNT u101)
(define-constant ERR-INSUFFICIENT-BALANCE u102)
(define-constant ERR-DAO-CORE-NOT-SET u103)
(define-constant ERR-EXECUTION-NOT-APPROVED u104)
(define-constant ERR-INVALID-RECIPIENT u105)
(define-constant ERR-TRANSFER-FAILED u106)
(define-constant ERR-PROPOSAL-NOT-FOUND u107)
(define-constant ERR-ALREADY-RELEASED u108)
(define-constant ERR-MILESTONE-NOT-REACHED u109)
(define-constant ERR-INVALID-MILESTONE u110)
(define-constant ERR-INVALID-BUDGET u111)
(define-constant ERR-INVALID-STATUS u112)
(define-constant ERR-INVALID-PHASE u113)
(define-constant ERR-PHASE-NOT-COMPLETE u114)
(define-constant ERR-INVALID-PHASE-COUNT u115)

(define-data-var dao-core-contract (optional principal) none)
(define-data-var total-released uint u0)

(define-map released-funds uint uint)
(define-map milestone-releases { proposal-id: uint, milestone: uint } uint)
(define-map proposal-phases uint (list 10 uint))

(define-read-only (get-total-released)
  (ok (var-get total-released))
)

(define-read-only (get-released-for-proposal (id uint))
  (ok (default-to u0 (map-get? released-funds id)))
)

(define-read-only (get-milestone-release (id uint) (milestone uint))
  (ok (default-to u0 (map-get? milestone-releases { proposal-id: id, milestone: milestone })))
)

(define-read-only (get-dao-core)
  (var-get dao-core-contract)
)

(define-private (validate-amount (amount uint))
  (if (> amount u0)
    (ok true)
    (err ERR-INVALID-AMOUNT))
)

(define-private (validate-recipient (recipient principal))
  (if (not (is-eq recipient tx-sender))
    (ok true)
    (err ERR-INVALID-RECIPIENT))
)

(define-public (set-dao-core (core principal))
  (begin
    (asserts! (is-eq tx-sender contract-owner) (err ERR-NOT-AUTHORIZED))
    (var-set dao-core-contract (some core))
    (ok true)
  )
)

(define-public (deposit)
  (let ((amount (stx-get-balance tx-sender)))
    (try! (validate-amount amount))
    (stx-transfer? amount tx-sender (as-contract tx-sender))
  )
)

(define-public (release-funds (proposal-id uint) (amount uint) (recipient principal))
  (let (
    (core (unwrap! (var-get dao-core-contract) (err ERR-DAO-CORE-NOT-SET)))
    (current-released (default-to u0 (map-get? released-funds proposal-id)))
  )
    (asserts! (is-eq contract-caller core) (err ERR-NOT-AUTHORIZED))
    (try! (validate-amount amount))
    (try! (validate-recipient recipient))
    (asserts! (>= (stx-get-balance (as-contract tx-sender)) amount) (err ERR-INSUFFICIENT-BALANCE))
    (match (as-contract (stx-transfer? amount tx-sender recipient))
      success (begin
        (map-set released-funds proposal-id (+ current-released amount))
        (var-set total-released (+ (var-get total-released) amount))
        (ok true))
      error (err ERR-TRANSFER-FAILED)
    )
  )
)

(define-public (release-milestone (proposal-id uint) (milestone uint) (amount uint) (recipient principal))
  (let (
    (core (unwrap! (var-get dao-core-contract) (err ERR-DAO-CORE-NOT-SET)))
    (key { proposal-id: proposal-id, milestone: milestone })
    (already-released (default-to u0 (map-get? milestone-releases key)))
  )
    (asserts! (is-eq contract-caller core) (err ERR-NOT-AUTHORIZED))
    (asserts! (is-eq already-released u0) (err ERR-ALREADY-RELEASED))
    (try! (validate-amount amount))
    (try! (validate-recipient recipient))
    (asserts! (>= (stx-get-balance (as-contract tx-sender)) amount) (err ERR-INSUFFICIENT-BALANCE))
    (match (as-contract (stx-transfer? amount tx-sender recipient))
      success (begin
        (map-set milestone-releases key amount)
        (let ((total-for-proposal (default-to u0 (map-get? released-funds proposal-id))))
          (map-set released-funds proposal-id (+ total-for-proposal amount))
          (var-set total-released (+ (var-get total-released) amount))
        )
        (ok true))
      error (err ERR-TRANSFER-FAILED)
    )
  )
)

(define-public (emergency-withdraw (amount uint) (recipient principal))
  (begin
    (asserts! (is-eq tx-sender contract-owner) (err ERR-NOT-AUTHORIZED))
    (try! (validate-amount amount))
    (asserts! (>= (stx-get-balance (as-contract tx-sender)) amount) (err ERR-INSUFFICIENT-BALANCE))
    (as-contract (stx-transfer? amount tx-sender recipient))
  )
)